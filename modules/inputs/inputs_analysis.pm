package Inputs_Analysis;

#Returns an array with instances of the Input class, as generated by the input information.
sub GetInputs
{
	my @inputs;
	
	my $extension;
	{
		no warnings "once";
		$extension = $Globals_Variables::IONames{Globals_Constants::IO_INPUT_EXTENSION()};
	}
	my $lengthExt = length($extension);
	
	opendir my $dir, $Globals_Variables::InputDir;

	foreach $file (readdir $dir)
	{
		$length = length($file);
		
		{
			no warnings 'once';
			$Globals_Variables::CurInputFile = $file;	
		}
		
		if ($length < $lengthExt || index(lc($file), $extension) != $length - $lengthExt) { next; }

		my $input = GetInput($file);
		
		if (defined($input)) { push @inputs, $input; }
	}

	closedir $dir;
	
	return @inputs;
}

#Called by GetInputs to focus on the given instance.
sub GetInput
{
	my $filePath = $_[0];

	my @lines = IO::FileLinesToArray($Globals_Variables::InputDir . $filePath);
	
	if (scalar(@lines) < 1)
	{
		{
			no warnings "once";
			
			if (!$Globals_Variables::ErrorDisplayed)
			{
				Errors::ShowError(Globals_Constants::ERROR_IO_FILE_READ(), $filePath);
			}			
		}
		
		return undef;
	}

	return Inputs_Store::InstatiateInput($filePath, \@lines);
}

#Performs the corresponding checks and modifications in the corresponding input value. It applies the
#rules for the given type, as defined by some of the collections in globals_variables.pm
#(e.g., InputURLs which refers to all the inputs dealing with URLs).
sub AnalyseInputValue
{
	my $input = $_[0];
	my $type = $_[1];

	my $output = undef;

	{
		no warnings 'once';
		
		if (Accessory::IndexOfArray(\@Globals_Variables::InputURLs, $type) > -1)
		{
			$output = Inputs_Checks::CheckInputURL($input);
		}
		elsif (Accessory::IndexOfArray(\@Globals_Variables::InputEntries, $type) > -1)
		{
			$output = Inputs_Checks::CheckInputEntry($input);
		}
		elsif (Accessory::IndexOfArray(\@Globals_Variables::InputLimits, $type) > -1)
		{
			$output = Inputs_Checks::CheckInputLimit($input);
		}
	}

	return $output;
}

1;